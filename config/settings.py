"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%$9)rnq+xb+cc#%2-g9zl4lu-5mvbeu^9l58e31=+23w2j+i_!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


"""
how to add log in, log out, and password reset/change API endpoints:
step1) pipenv install dj-rest-auth
step2) configure url.py

how to add user registration, or sign up, endpoint:
step1) pipenv install django-allauth
step2) add django.contrib.sites , allauth , allauth.account , 
allauth.socialaccount , dj_rest_auth.registration to INSTALLED_APPS
step3) add EMAIL_BACKEND and SITE_ID at end of settings.
step4) configure signup endpoint in url.py
step5) python manage.py migrate

how to add users endpoint to handle users via api:
• add UserSerializer class to Serializers(list/detail)
• add views for each endpoint
• add URL routes for each endpoint
"""

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    # 3rd-party apps
    'rest_framework',
    'rest_framework.authtoken',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # Authentication and Registration in Django Rest Framework that create endpoints
    'dj_rest_auth',
    'dj_rest_auth.registration',
    # Generate real Swagger/OpenAPI 2.0 specifications from a Django Rest Framework API. 
    'drf_yasg', 


    # Local
    'posts.apps.PostsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


"""
(built-in TokenAuthentication Method)
Implementation:
step1) add 'rest_framework.authtoken', to INSTALLED_APPS
step2) update 'DEFAULT_AUTHENTICATION_CLASSES' at end of settings
step3) stop the server and sync database via python manage.py migrate (it will add token section in admin panel)
Note: tokens are only generated in admin panel after there is an API call.

(3rd party service TokenAuthentication Method)
Auth0 is an easy to implement, adaptable authentication and authorization platform.
"""

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        # restrict API access to authenticated users.
        'rest_framework.permissions.IsAuthenticated',
    ],
    # authentication - user registration
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # Sessions are used to power the Browsable API and the ability to log in and log out of it.
        'rest_framework.authentication.SessionAuthentication',
        # BasicAuthentication is used to pass the session ID in the HTTP headers for the API itself.
        'rest_framework.authentication.TokenAuthentication'
    ],
}

# confirm registered accounts via console , replace console with smtp if you have configured smtp server
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
SITE_ID = 1
